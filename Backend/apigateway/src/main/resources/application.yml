# File: application.yml
# Path: your-api-gateway-project/src/main/resources/application.yml

server:
  port: 8094 # The default port for the API Gateway. All client requests will hit this.

spring:
  application:
    name: api-gateway # The name of this service, used by Eureka
  cloud:
    gateway:
      webflux: # Spring Cloud Gateway uses Spring WebFlux
        cors:
          filter:
            cors-configurations:
              '[/**]': # Apply CORS to all paths
                allowed-origins:
                  - "http://localhost:19000" # Add your React Native development URL (e.g., Expo)
                  - "http://localhost:8081"  # Add your React Native web build URL if applicable
                  - "http://localhost:3000"  # Common for React web app
                allowed-methods:
                  - "GET"
                  - "POST"
                  - "PUT"
                  - "DELETE"
                  - "OPTIONS"
                allowed-headers:
                  - "*" # Allow all headers, including Authorization for JWT
                allow-credentials: true # Allow sending cookies and HTTP authentication headers
                max-age: 3600 # How long the pre-flight request can be cached (in seconds)

      routes:
        # Route for User Service
        - id: user-service
          uri: lb://USER-SERVICE # 'lb://' indicates load-balancing via Eureka Service ID
          predicates:
            - Path=/users/** # Matches any request starting with /users/
          filters:
            - RewritePath=/users/(?<segment>.*), /users/${segment} # Rewrites /users/xyz to /users/xyz for the target service

        # Route for Notification Service
        - id: notification-service
          uri: lb://NOTIFICATION-SERVICE
          predicates:
            - Path=/notifications/**
          filters:
            - RewritePath=/notifications/(?<segment>.*), /notifications/${segment}

        # Route for Task Service
        - id: task-service
          uri: lb://TASK-SERVICE
          predicates:
            - Path=/tasks/**
          filters:
            - RewritePath=/tasks/(?<segment>.*), /tasks/${segment}

        # Route for Project Service
        - id: project-service
          uri: lb://PROJECT-SERVICE
          predicates:
            - Path=/projects/**
          filters:
            - RewritePath=/projects/(?<segment>.*), /projects/${segment}

        # Route for Goals Service
        - id: goals-service
          uri: lb://GOALS-SERVICE
          predicates:
            - Path=/goals/**
          filters:
            - RewritePath=/goals/(?<segment>.*), /goals/${segment}
          
        - id: auth-service # Unique ID for this route
          uri: lb://AUTH-SERVICE # This MUST match the Auth Service's spring.application.name
          predicates:
            - Path=/auth/** # All requests starting with /auth will go to Auth Service
          filters:
            - RewritePath=/auth/(?<segment>.*), /auth/${segment}

            # NEW ROUTE FOR PORTFOLIO SERVICE
        - id: portfolio-service # Unique ID for this route
          uri: lb://PORTFOLIO-SERVICE # This MUST match the Portfolio Service's spring.application.name
          predicates:
            - Path=/portfolios/** # All requests starting with /portfolios will go to Portfolio Service
          filters:
            - RewritePath=/portfolios/(?<segment>.*), /portfolios/${segment}

        - id: chat-service
          uri: lb://CHAT-SERVICE # 'lb://' indicates load balancing via Eureka
          predicates:
            - Path=/api/chat/** # REST endpoints for chat (e.g., /api/chat/send, /api/chat/history)
            - WebSocket # IMPORTANT: This predicate handles WebSocket upgrade requests
          filters:
            - RewritePath=/api/chat/(?<segment>.*), /${segment} # Remove /api/chat from path




eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/ # Address of your Eureka Server
  instance:
    hostname: localhost